<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elasticsearch.Net.Connection.Thrift</name>
    </assembly>
    <members>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TBase.Read(Elasticsearch.Net.Connection.Thrift.Protocol.TProtocol)">
            <summary>Reads the TObject from the given input protocol.</summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TBase.Write(Elasticsearch.Net.Connection.Thrift.Protocol.TProtocol)">
            <summary>Writes the objects out to the protocol.</summary>
        </member>
        <member name="T:Elasticsearch.Net.Connection.Thrift.Protocol.TBinaryProtocol.Factory">
            Factory
        </member>
        <member name="T:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.Types">
            All of the on-wire type codes.
        </member>
        <member name="F:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol._lastField">
            Used to keep track of the last field for the current and previous structs,
            so we can do the delta stuff.
        </member>
        <member name="F:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol._booleanField">
            If we encounter a boolean field begin, save the TField here so it can
            have the value incorporated.
        </member>
        <member name="F:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol._boolValue">
            If we Read a field header, and it's a boolean field, save the boolean
            value here so that ReadBool can use it.
        </member>
        <member name="T:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.Factory">
            Factory
        </member>
        <member name="F:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol._byteDirectBuffer">
            Writes a byte without any possibility of all that field header nonsense.
            Used internally by other writing methods that know they need to Write a byte.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteByteDirect(System.Int32)">
            Writes a byte without any possibility of all that field header nonsense.
        </member>
        <member name="F:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.i32buf">
            Write an i32 as a varint. Results in 1-5 bytes on the wire.
            TODO: make a permanent buffer like WriteVarint64?
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteMessageBegin(Elasticsearch.Net.Connection.Thrift.Protocol.TMessage)">
            Write a message header to the wire. Compact Protocol messages contain the
            protocol version so we can migrate forwards in the future if need be.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteStructBegin(Elasticsearch.Net.Connection.Thrift.Protocol.TStruct)">
            Write a struct begin. This doesn't actually put anything on the wire. We
            use it as an opportunity to put special placeholder markers on the field
            stack so we can get the field id deltas correct.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteStructEnd">
            Write a struct end. This doesn't actually put anything on the wire. We use
            this as an opportunity to pop the last field from the current struct off
            of the field stack.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteFieldBegin(Elasticsearch.Net.Connection.Thrift.Protocol.TField)" -->
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteFieldBeginInternal(Elasticsearch.Net.Connection.Thrift.Protocol.TField,System.Byte)">
            The workhorse of WriteFieldBegin. It has the option of doing a
            'type override' of the type header. This is used specifically in the
            boolean field case.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteFieldStop">
            Write the STOP symbol so we know there are no more fields in this struct.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteMapBegin(Elasticsearch.Net.Connection.Thrift.Protocol.TMap)">
            Write a map header. If the map is empty, omit the key and value type
            headers, as we don't need any additional information to skip it.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteListBegin(Elasticsearch.Net.Connection.Thrift.Protocol.TList)">
            Write a list header.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteSetBegin(Elasticsearch.Net.Connection.Thrift.Protocol.TSet)">
            Write a set header.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteBool(System.Boolean)">
            Write a boolean value. Potentially, this could be a boolean field, in
            which case the field header info isn't written yet. If so, decide what the
            right type header is for the value and then Write the field header.
            Otherwise, Write a single byte.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteByte(System.Byte)">
            Write a byte. Nothing to see here!
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteI16(System.Int16)">
            Write an I16 as a zigzag varint.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteI32(System.Int32)">
            Write an i32 as a zigzag varint.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteI64(System.Int64)">
            Write an i64 as a zigzag varint.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteDouble(System.Double)">
            Write a double to the wire as 8 bytes.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteString(System.String)">
            Write a string to the wire with a varint size preceding.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteBinary(System.Byte[])">
            Write a byte array, using a varint for the size.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.WriteCollectionBegin(Elasticsearch.Net.Connection.Thrift.Protocol.TType,System.Int32)">
            Abstract method for writing the start of lists and sets. List and sets on
            the wire differ only by the type indicator.
        </member>
        <member name="F:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol._varint64Out">
            Write an i64 as a varint. Results in 1-10 bytes on the wire.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.longToZigzag(System.Int64)">
            Convert l into a zigzag long. This allows negative numbers to be
            represented compactly as a varint.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.intToZigZag(System.Int32)">
            Convert n into a zigzag int. This allows negative numbers to be
            represented compactly as a varint.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.fixedLongToBytes(System.Int64,System.Byte[],System.Int32)">
            Convert a long into little-endian bytes in buf starting at off and going
            until off+7.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadMessageBegin">
            Read a message header.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadStructBegin">
            Read a struct begin. There's nothing on the wire for this, but it is our
            opportunity to push a new struct begin marker onto the field stack.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadStructEnd">
            Doesn't actually consume any wire data, just removes the last field for
            this struct from the field stack.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadFieldBegin">
            Read a field header off the wire.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadMapBegin">
            Read a map header off the wire. If the size is zero, skip Reading the key
            and value type. This means that 0-length maps will yield TMaps without the
            "correct" types.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadListBegin">
            Read a list header off the wire. If the list size is 0-14, the size will
            be packed into the element type header. If it's a longer list, the 4 MSB
            of the element type header will be 0xF, and a varint will follow with the
            true size.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadSetBegin">
            Read a set header off the wire. If the set size is 0-14, the size will
            be packed into the element type header. If it's a longer set, the 4 MSB
            of the element type header will be 0xF, and a varint will follow with the
            true size.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadBool">
            Read a boolean off the wire. If this is a boolean field, the value should
            already have been Read during ReadFieldBegin, so we'll just consume the
            pre-stored value. Otherwise, Read a byte.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadByte">
            Read a single byte off the wire. Nothing interesting here.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadI16">
            Read an i16 from the wire as a zigzag varint.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadI32">
            Read an i32 from the wire as a zigzag varint.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadI64">
            Read an i64 from the wire as a zigzag varint.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadDouble">
            No magic here - just Read a double off the wire.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadString">
            Reads a byte[] (via ReadBinary), and then UTF-8 decodes it.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadBinary">
            Read a byte[] from the wire.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadBinary(System.Int32)">
            Read a byte[] of a known length from the wire.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadVarint32">
            Read an i32 from the wire as a varint. The MSB of each byte is set
            if there is another byte to follow. This can Read up to 5 bytes.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.ReadVarint64">
            Read an i64 from the wire as a proper varint. The MSB of each byte is set
            if there is another byte to follow. This can Read up to 10 bytes.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.zigzagToInt(System.UInt32)">
            Convert from zigzag int to int.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.zigzagToLong(System.UInt64)">
            Convert from zigzag long to long.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.bytesToLong(System.Byte[])">
            Note that it's important that the mask bytes are long literals,
            otherwise they'll default to ints, and when you shift an int left 56 bits,
            you just get a messed up int.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.getTType(System.Byte)">
            Given a TCompactProtocol.Types constant, convert it to its corresponding
            TType value.
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TCompactProtocol.getCompactType(Elasticsearch.Net.Connection.Thrift.Protocol.TType)">
            Given a TType value, find the appropriate TCompactProtocol.Types constant.
        </member>
        <member name="T:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol">
             <summary>
             JSON protocol implementation for thrift.
            
             This is a full-featured protocol supporting Write and Read.
            
             Please see the C++ class header for a detailed description of the
             protocol's wire format.
            
             Adapted from the Java version.
             </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.#ctor(Elasticsearch.Net.Connection.Thrift.Transport.TTransport)">
            <summary>
             TJSONProtocol Constructor
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.PushContext(Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.JSONBaseContext)">
            <summary>
             Push a new JSON context onto the stack.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.PopContext">
            <summary>
             Pop the last JSON context off the stack
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.ReadJSONSyntaxChar(System.Byte[])">
            <summary>
             Read a byte that must match b[0]; otherwise an excpetion is thrown.
             Marked protected to avoid synthetic accessor in JSONListContext.Read
             and JSONPairContext.Read
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.HexVal(System.Byte)">
            <summary>
             Convert a byte containing a hex char ('0'-'9' or 'a'-'f') into its
             corresponding hex value
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.HexChar(System.Byte)">
            <summary>
             Convert a byte containing a hex value to its corresponding hex character
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.WriteJSONString(System.Byte[])">
            <summary>
             Write the bytes in array buf as a JSON characters, escaping as needed
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.WriteJSONInteger(System.Int64)">
            <summary>
             Write out number as a JSON value. If the context dictates so, it will be
             wrapped in quotes to output as a JSON string.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.WriteJSONDouble(System.Double)">
            <summary>
             Write out a double as a JSON value. If it is NaN or infinity or if the
             context dictates escaping, Write out as JSON string.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.WriteJSONBase64(System.Byte[])">
            <summary>
             Write out contents of byte array b as a JSON string with base-64 encoded
             data
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.ReadJSONString(System.Boolean)">
            Reading methods.
            <summary>
             Read in a JSON string, unescaping as appropriate.. Skip Reading from the
             context if skipContext is true.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.IsJSONNumeric(System.Byte)">
            <summary>
             Return true if the given byte could be a valid part of a JSON number.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.ReadJSONNumericChars" -->
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.ReadJSONInteger">
            <summary>
             Read in a JSON number. If the context dictates, Read in enclosing quotes.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.ReadJSONDouble">
            <summary>
             Read in a JSON double value. Throw if the value is not wrapped in quotes
             when expected or if wrapped in quotes when not expected.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.ReadJSONBase64" -->
        <member name="T:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.Factory">
            <summary>
            Factory for JSON protocol objects
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.JSONBaseContext">
            <summary>
             Base class for tracking JSON contexts that may require
             inserting/Reading additional JSON syntax characters
             This base context does nothing.
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.JSONListContext">
            <summary>
             Context for JSON lists. Will insert/Read commas before each item except
             for the first one
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.JSONPairContext">
            <summary>
             Context for JSON records. Will insert/Read colons before the value portion
             of each record pair, and commas before each key except the first. In
             addition, will indicate that numbers in the key position need to be
             escaped in quotes (since JSON keys must be strings).
            </summary>
        </member>
        <member name="T:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.LookaheadReader">
            <summary>
             Holds up to one byte from the transport
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.LookaheadReader.Read">
            <summary>
             Return and consume the next byte to be Read, either taking it from the
             data buffer if present or getting it from the transport otherwise.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Protocol.TJSONProtocol.LookaheadReader.Peek">
            <summary>
             Return the next byte to be Read without consuming, filling the data
             buffer if it has not been filled alReady.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.ThriftConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.ThriftConnection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.ThriftConnection.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Elasticsearch.Net.Connection.HttpConnection"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="F:Elasticsearch.Net.Connection.Thrift.Transport.TServerSocket.clientTimeout">
            Underlying server with socket
            Timeout for client sockets from accept
        </member>
        <member name="F:Elasticsearch.Net.Connection.Thrift.Transport.TServerSocket.useBufferedSockets">
            Whether or not to wrap new TSocket connections in buffers
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Transport.TServerSocket.#ctor(System.Net.Sockets.TcpListener)">
            Creates a server socket from underlying socket object
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Transport.TServerSocket.#ctor(System.Net.Sockets.TcpListener,System.Int32)">
            Creates a server socket from underlying socket object
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Transport.TServerSocket.#ctor(System.Int32)">
            Creates just a port listening server socket
        </member>
        <member name="M:Elasticsearch.Net.Connection.Thrift.Transport.TServerSocket.#ctor(System.Int32,System.Int32)">
            Creates just a port listening server socket
        </member>
        <!-- Badly formed XML comment ignored for member "T:Elasticsearch.Net.Connection.Thrift.Transport.TTransportFactory" -->
    </members>
</doc>
